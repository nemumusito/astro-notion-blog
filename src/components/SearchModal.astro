---
---

<div class="search-modal-container">
  <div class="overlay"></div>

  <div class="search-modal">
    <div class="search-prompt">
      <input type="text" placeholder="Search..." />
    </div>
    <div class="search-result">
      <ul>
        <li class="selected">
          <a href="#">
            <div class="search-result-title"></div>
            <div class="search-result-description"></div>
          </a>
        </li>
      </ul>
    </div>
  </div>
</div>

<style>
  div.search-modal-container {
    display: none;
  }

  div.overlay {
    z-index: 99;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
  }

  div.search-modal {
    z-index: 100;
    position: fixed;
    top: 100px;
    left: 20%;
    width: 60%;
    border-radius: 6px;
    background-color: var(--bg);
  }
  @media (max-width: 640px) {
    div.search-modal {
      left: 0;
      width: 100%;
    }
  }

  div.search-prompt {
    margin: 6px 0;
    padding: 0 6px;
  }
  div.search-prompt input {
    width: 100%;
    border: 0px solid transparent;
    padding: 0.4rem;
    background-color: var(--input-bg);
    color: var(--fg);
    font-size: 1.2rem;
    line-height: 1.6rem;
  }

  div.search-result {
    border-top: 1px solid var(--hr-border);
  }
  div.search-result ul {
    list-style: none;
    margin: 0.3rem;
    padding: 0;
  }
  div.search-result ul > :global(li) {
  }
  div.search-result ul > :global(li > a) {
    display: block;
    padding: 0.4rem 0.6rem;
    border-radius: var(--radius);
  }
  div.search-result ul > :global(li.selected > a) {
    background-color: rgba(241, 241, 239, 1);
  }

  div.search-result :global(div.search-result-title) {
    padding: 0.1rem 0;
    color: var(--fg);
    font-size: 1.1rem;
    line-height: 1.2rem;
    font-weight: bold;
  }
  div.search-result :global(div.search-result-description) {
    margin: 0 0 0.1rem;
    color: var(--fg);
    font-size: 0.9rem;
    line-height: 1.2rem;
  }
</style>

<script>
  import type { FeedItem, DOMElement, SearchInput, ListItem, ResultsList, ClickableElement } from '../lib/search-types'

  document.addEventListener('DOMContentLoaded', async () => {
    let feedItems: FeedItem[] = []
    let fetched = false

    async function openModal() {
      const container = document.querySelector('.search-modal-container') as DOMElement
      const input = document.querySelector('.search-prompt input') as SearchInput
      if (container && input) {
        container.style.display = 'block'
        input.focus()

        if (!fetched) {
          await fetchRSS()
        }
        searchAndRender()
      }
    }

    function closeModal() {
      const container = document.querySelector('.search-modal-container') as DOMElement
      if (container) {
        container.style.display = 'none'
      }
    }

    function handleKeydown(event: KeyboardEvent) {
      if (event.keyCode === 13) {
        // Enter
        select()
      } else if (event.keyCode === 27) {
        // ESC
        closeModal()
      } else if (event.keyCode === 38) {
        // Up
        selectUp(event)
      } else if (event.keyCode === 40) {
        // Down
        selectDown(event)
      } else {
        searchAndRender()
      }
    }

    function select() {
      const a = document.querySelector('.search-result ul > li.selected a') as ClickableElement
      if (a) {
        a.click()
      }
    }

    function selectFirst() {
      const li = document.querySelector('.search-result ul > li:first-child') as ListItem
      if (li) {
        li.classList.add('selected')
      }
    }

    function selectUp(event: Event) {
      event.preventDefault()

      const ul = document.querySelector('.search-result ul') as ResultsList
      if (!ul) return

      const selected = ul.querySelector('.selected')
      if (selected) {
        selected.classList.remove('selected')

        if (selected.previousElementSibling) {
          selected.previousElementSibling.classList.add('selected')
        } else if (ul.lastElementChild) {
          ul.lastElementChild.classList.add('selected')
        }
      } else if (ul.lastElementChild) {
        ul.lastElementChild.classList.add('selected')
      }
    }

    function selectDown(event: Event) {
      event.preventDefault()

      const ul = document.querySelector('.search-result ul') as ResultsList
      if (!ul) return

      const selected = ul.querySelector('.selected')
      if (selected) {
        selected.classList.remove('selected')

        if (selected.nextElementSibling) {
          selected.nextElementSibling.classList.add('selected')
        } else if (ul.firstElementChild) {
          ul.firstElementChild.classList.add('selected')
        }
      } else if (ul.firstElementChild) {
        ul.firstElementChild.classList.add('selected')
      }
    }

    function handleMouseover(event: MouseEvent) {
      const target = event.target as HTMLElement
      const ul = target.closest('ul')
      if (!ul) return

      Array.from(ul.children).forEach((element) => {
        element.classList.remove('selected')
      })
      const li = target.closest('li')
      if (li) {
        li.classList.add('selected')
      }
    }

    function searchAndRender() {
      const input = document.querySelector('.search-prompt input') as SearchInput
      if (!input) return

      const text = input.value.trim()

      if (text !== '') {
        const results = search(text)
        renderResults(results)
      } else {
        renderResults(feedItems)
      }

      selectFirst()
    }

    function search(query: string): FeedItem[] {
      const results: FeedItem[] = []
      feedItems.forEach((item) => {
        if (item.title.includes(query) || item?.description?.includes(query)) {
          results.push(item)
        }
      })
      return results
    }

    function renderResults(results: FeedItem[]) {
      const ul = document.querySelector('.search-result ul') as ResultsList
      if (!ul) return

      ul.innerHTML = ''

      results.forEach((item) => {
        const li = document.createElement('li')
        const a = document.createElement('a')
        const title = document.createElement('div')
        const description = document.createElement('div')

        title.classList.add('search-result-title')
        title.textContent = item.title
        description.classList.add('search-result-description')
        description.textContent = item.description || ''
        a.href = item.link

        li.addEventListener('mouseover', handleMouseover)

        a.appendChild(title)
        a.appendChild(description)
        li.appendChild(a)
        ul.appendChild(li)
      })
    }

    async function fetchRSS() {
      const url = new URL(location.href)
      const port = url.port ? `:${url.port}` : ''

      const res = await fetch(
        `${url.protocol}//${url.hostname}${port}/feed`
      )
      if (res.status !== 200) {
        console.log(res.status)
        throw new Error('Failed to fetch RSS feed')
      }

      const body = await res.text()

      const parser = new DOMParser()
      const xml = parser.parseFromString(body, 'text/xml')

      Array.from(xml.getElementsByTagName('item')).forEach((item: Element) => {
        const titleElement = item.getElementsByTagName('title')[0]
        const linkElement = item.getElementsByTagName('link')[0]
        const descriptionElement = item.getElementsByTagName('description')[0]
        const pubDateElement = item.getElementsByTagName('pubDate')[0]

        const title = titleElement?.textContent
        const link = linkElement?.textContent
        const description = descriptionElement?.textContent
        const pubDate = pubDateElement?.textContent

        if (title && link && pubDate) {
          feedItems.push({
            title,
            link,
            description: description || undefined,
            pubDate,
          })
        }
      })

      fetched = true
    }

    // イベントリスナーの設定
    const searchButtons = Array.from(document.getElementsByClassName('open-search-modal'))
    searchButtons.forEach((element: Element) => {
      element.addEventListener('click', openModal)
    })

    const overlay = document.querySelector('.overlay') as HTMLElement | null
    if (overlay) {
      overlay.addEventListener('click', closeModal)
    }

    document.addEventListener('keydown', handleKeydown)
  })
</script>
